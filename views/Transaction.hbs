<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Bank Transaction Page</title>
  <link rel="stylesheet" href="Transaction.css">
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://kit.fontawesome.com/ab56d9cd66.js" crossorigin="anonymous"></script>

</head>

<body class="bg-dark text-light">
  <!-- Loader -->
  <div class="loader" id="loader">
    <div></div>
    <div></div>
    <div></div>
  </div>

  <div class="container my-5">
    <!-- User Information Section -->
    <div class="row">
      <div class="col-md-12">
        <div class="card shadow-lg bg-dark text-light p-4">
          <div class="d-flex justify-content-between align-items-center">
            <div>
              <p class="text-primary">Account Status:
                <span class="badge bg-success"><i class="fas fa-check-circle"></i> {{accountStatus}}</span>
              </p>
              <h2 class="text-primary"><i class="fas fa-user-circle"></i> Welcome, {{username}}</h2>
              <p><i class="fas fa-envelope"></i> Email: {{email}}</p>
              <p><i class="fas fa-map-marker-alt"></i> Address: {{address}}</p>
              <p><i class="fas fa-hashtag"></i> Account Number: {{accountNo}}</p>
              <p><i class="fas fa-code"></i> IFSC CODE: {{ifscCode}}</p>
              <p><i class="fas fa-university"></i> Branch Name: {{branchName}}</p>
            </div>
            <div>
              <h3 class="text-success"><i class="fas fa-wallet"></i> Balance: ₹{{finalBalance}}</h3>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Transaction Options Section -->
    <div class="row my-4">
      <div class="col-md-12">
        <div class="card shadow-lg bg-dark text-light p-3">
          <div class="d-flex justify-content-around">
            <button class="btn btn-primary" id="addBalanceBtn"><i class="fas fa-plus-circle"></i> Add Balance</button>
            <button class="btn btn-warning" id="sendMoneyBtn"><i class="fas fa-paper-plane"></i> Send Money</button>
            <button class="btn btn-success" id="downloadHistoryBtn"><i class="fas fa-download"></i> Download
              History</button>
          </div>
        </div>
      </div>
    </div>

    <!-- Transaction History Section -->
    <div class="row">
      <div class="col-md-12">
        <div class="card shadow-lg bg-dark text-light p-4">
          <h4 class="mb-3"><i class="fas fa-history"></i> Transaction History</h4>
          <div class="table-responsive">
            <table class="table table-dark table-hover">
              <thead>
                <tr>
                  <th>#</th>
                  <th>Transaction Type</th>
                  <th>Amount</th>
                  <th>Date & Time</th>
                  <th>Description</th>
                </tr>
              </thead>
              <tbody id="transactionHistory">
                <!-- Transaction rows populated by JavaScript -->
              </tbody>
            </table>
          </div>
          <!-- Pagination -->
          <nav>
            <ul class="pagination justify-content-center mt-3" id="pagination">
              <!-- Pagination dynamically generated -->
            </ul>
          </nav>
        </div>
      </div>
    </div>
  </div>

  <!-- Modals -->
  <!-- Add Balance Modal -->
  <div class="modal fade" id="addBalanceModal" tabindex="-1" aria-labelledby="addBalanceLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content bg-dark text-light">
        <div class="modal-header">
          <h5 class="modal-title" id="addBalanceLabel">Add Balance</h5>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="addBalanceForm">
            <div class="mb-3">
              <label for="addAmount" class="form-label">Amount</label>
              <input type="number" class="form-control" id="addAmount" placeholder="Enter amount to add" required>
            </div>
            <button type="submit" class="btn btn-primary w-100">Submit</button>
          </form>
        </div>
      </div>
    </div>
  </div>

  <!-- Send Money Modal -->
  <div class="modal fade" id="sendMoneyModal" tabindex="-1" aria-labelledby="sendMoneyLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content bg-dark text-light">
        <div class="modal-header">
          <h5 class="modal-title" id="sendMoneyLabel">Send Money</h5>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="sendMoneyForm">
            <div class="mb-3">
              <label for="receiverAccountNo" class="form-label">Receiver Account Number</label>
              <input type="number" class="form-control" id="receiverAccountNo" placeholder="Enter account number"
                required>
            </div>
            <div class="mb-3">
              <label for="receiverIfsc" class="form-label">IFSC Code</label>
              <input type="text" class="form-control" id="receiverIfsc" placeholder="Enter IFSC Code" required>
            </div>
            <div class="mb-3">
              <label for="branchName" class="form-label">Branch Name</label>
              <input type="text" class="form-control" id="branchName" placeholder="Enter Branch Name" required>
            </div>
            <div class="mb-3">
              <label for="sendAmount" class="form-label">Amount</label>
              <input type="number" class="form-control" id="sendAmount" placeholder="Enter amount" required>
            </div>
            <button type="submit" class="btn btn-warning w-100">Send</button>
          </form>
        </div>
      </div>
    </div>
  </div>


  <!-- JavaScript -->
  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const loader = document.getElementById("loader");
      const transactionHistory = document.getElementById("transactionHistory");
      const pagination = document.getElementById("pagination");
      let transactions = []; // Store transactions from backend
      let totalPages = 0;

      const itemsPerPage = 5;

      // Fetch Transactions from Backend
      async function fetchTransactions(page = 1) {
        loader.style.display = "flex"; // Show loader while fetching data
        try {
          const response = await fetch(`/auth/Transaction?page=${page}&itemsPerPage=${itemsPerPage}`, {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
            },
          });

          const data = await response.json();

          if (response.ok) {
            transactions = data.transactions || [];
            totalPages = data.totalPages || 0;
            populateTransactions(page);
          } else {
            transactionHistory.innerHTML = `<tr><td colspan="5" class="text-center">${data.message || "Failed to fetch transactions."}</td></tr>`;
          }
        } catch (err) {
          console.error("Error fetching transactions:", err);
          transactionHistory.innerHTML = `<tr><td colspan="5" class="text-center">Error fetching transactions. Please try again later.</td></tr>`;
        } finally {
          loader.style.display = "none"; // Hide loader after fetch
        }
      }

      // Populate Transactions Table
      function populateTransactions(page = 1) {
        transactionHistory.innerHTML = ""; // Clear previous data

        // Loop through the transactions and populate rows
        transactions.forEach((txn, index) => {
          const row = document.createElement("tr");
          const amount = parseFloat(txn.amount) || 0; // Convert amount to number if not already

          row.innerHTML = `
      <td>${(page - 1) * itemsPerPage + index + 1}</td>
      <td class="${txn.transactionType === "credit" ? "transaction-credit" : "transaction-debit"}">${txn.transactionType.toUpperCase()}</td>
      <td>₹${amount.toFixed(2)}</td>
      <td>${new Date(txn.transactionDate).toLocaleString()}</td>
      <td>${txn.description || "No description"}</td>
    `;

          transactionHistory.appendChild(row);
        });

        renderPagination(totalPages, page); // Render pagination buttons
      }


      // Render Pagination Buttons
      function renderPagination(totalPages, currentPage) {
        pagination.innerHTML = ""; // Clear existing pagination

        for (let i = 1; i <= totalPages; i++) {
          const li = document.createElement("li");
          li.className = `page-item ${i === currentPage ? "active" : ""}`;
          li.innerHTML = `<a class="page-link" href="#">${i}</a>`;

          li.addEventListener("click", (e) => {
            e.preventDefault();
            fetchTransactions(i); // Fetch transactions for the clicked page
          });

          pagination.appendChild(li);
        }
      }

      // Initialize Fetching Transactions
      fetchTransactions();

      // Event Listeners for Modals
      document.getElementById("addBalanceBtn").addEventListener("click", () => {
        const addBalanceModal = new bootstrap.Modal(document.getElementById("addBalanceModal"));
        addBalanceModal.show();
      });

      document.getElementById("sendMoneyBtn").addEventListener("click", () => {
        const sendMoneyModal = new bootstrap.Modal(document.getElementById("sendMoneyModal"));
        sendMoneyModal.show();
      });

      // Add Balance Form Submission
      document.getElementById("addBalanceForm").addEventListener("submit", async (e) => {
        e.preventDefault();
        loader.style.display = "flex";

        const amount = document.getElementById("addAmount").value;

        try {
          const response = await fetch("/auth/addMoney", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ amount }),
          });

          const data = await response.json();
          if (response.ok) {
            alert(data.message);
            location.reload();
          } else {
            alert(data.message || "Failed to add balance.");
          }
        } catch (err) {
          console.error(err);
          alert("An error occurred. Please try again.");
        } finally {
          loader.style.display = "none";
        }
      });

      // Send Money Form Submission
      document.getElementById("sendMoneyForm").addEventListener("submit", async (e) => {
        e.preventDefault();
        loader.style.display = "flex";

        const data = {
          receiverAccountNo: document.getElementById("receiverAccountNo").value.trim(),
          receiverIfsc: document.getElementById("receiverIfsc").value.trim(),
          branchName: document.getElementById("branchName").value.trim(),
          amount: parseFloat(document.getElementById("sendAmount").value.trim()),
        };

        if (!data.receiverAccountNo || data.receiverAccountNo.length < 10) {
          alert("Please enter a valid Receiver Account Number (minimum 10 digits).");
          loader.style.display = "none";
          return;
        }

        if (!data.receiverIfsc || data.receiverIfsc.length !== 6) {
          alert("Please enter a valid Receiver IFSC Code (6 characters).");
          loader.style.display = "none";
          return;
        }

        if (!data.branchName) {
          alert("Please enter the Branch Name.");
          loader.style.display = "none";
          return;
        }

        if (isNaN(data.amount) || data.amount <= 0) {
          alert("Please enter a valid amount greater than 0.");
          loader.style.display = "none";
          return;
        }

        try {
          const response = await fetch("/auth/sendMoney", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(data),
          });

          const result = await response.json();
          if (response.ok) {
            alert("Money sent successfully!");
            location.reload();
          } else {
            alert(`Failed to send money: ${result.message || "Unknown error occurred."}`);
          }
        } catch (err) {
          console.error("Error occurred while sending money:", err);
          alert("An unexpected error occurred. Please try again later.");
        } finally {
          loader.style.display = "none";
        }
      });

      // Download Transaction History
      document.getElementById("downloadHistoryBtn").addEventListener("click", async () => {
        loader.style.display = "flex";

        const accountNo = "{{accountNo}}";
        try {
          const response = await fetch(`/auth/transactions/history/download/${accountNo}`);
          if (response.ok) {
            const blob = await response.blob();
            const url = URL.createObjectURL(blob);
            const a = document.createElement("a");
            a.href = url;
            a.download = "Transaction_History.pdf";
            a.click();
          } else {
            alert("Failed to download history.");
          }
        } catch (err) {
          console.error(err);
        } finally {
          loader.style.display = "none";
        }
      });
    });



  </script>
</body>

</html>